version: '3.8'

services:
  mongo:
    image: mongo:5.0
    container_name: ecommerce-mongo
    restart: always
    volumes:
      - mongo-data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    env_file:
      - .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ecommerce
    ports:
      - "27017:27017"
    networks:
      - ecommerce-net
    healthcheck:
      test: mongosh --eval 'db.runCommand("ping").ok' mongodb://root:${MONGO_ROOT_PASSWORD}@localhost:27017/admin?authSource=admin
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  auth-service:
    build: ./auth-service
    container_name: auth-service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGO_URL: mongodb://root:${MONGO_ROOT_PASSWORD}@mongo:27017/ecommerce?authSource=admin
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=PathPrefix(`/api/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=8000"

  product-service:
    build: ./product-service
    container_name: product-service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/ecommerce?authSource=ecommerce
      PORT: 8000
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.products.rule=PathPrefix(`/api/products`)"
      - "traefik.http.services.products.loadbalancer.server.port=8000"

  cart-service:
    build: ./cart-service
    container_name: cart-service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      product-service:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/ecommerce?authSource=ecommerce
      PRODUCT_SERVICE_URL: http://product-service:8000/api
      CART_SERVICE_URL: http://cart-service:8000/api
      PORT: 8000
    mem_limit: 1g
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cart.rule=PathPrefix(`/api/cart`)"
      - "traefik.http.services.cart.loadbalancer.server.port=8000"

  payment-service:
    build: ./payment-service
    container_name: payment-service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      cart-service:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/ecommerce?authSource=ecommerce
      CART_SERVICE_URL: http://cart-service:8000/api
      PORT: 8000
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.payments.rule=PathPrefix(`/api/payments`)"
      - "traefik.http.services.payments.loadbalancer.server.port=8000"

  order-service:
    build: ./order-service
    container_name: order-service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
      product-service:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/ecommerce?authSource=ecommerce
      PRODUCT_SERVICE_URL: http://product-service:8000/api
      PAYMENT_SERVICE_URL: http://payment-service:8000/api
      PORT: 8000
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.orders.rule=PathPrefix(`/api/orders`)"
      - "traefik.http.services.orders.loadbalancer.server.port=8000"

  admin-service:
    build: ./admin-service
    container_name: admin-service
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    env_file:
      - .env
    environment:
      MONGO_URL: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongo:27017/ecommerce?authSource=ecommerce
    networks:
      - ecommerce-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=PathPrefix(`/api/admin`)"
      - "traefik.http.services.admin.loadbalancer.server.port=8000"

  frontend:
    build: ./e-commerce-frontend
    container_name: frontend
    restart: always
    ports:
      - "3000:3000"
    networks:
      - ecommerce-net
    depends_on:
      - auth-service
      - product-service
      - cart-service
      - payment-service
      - order-service
      - admin-service
    env_file:
      - .env

  reverse-proxy:
    image: traefik:v2.5
    container_name: traefik
    command:
      - --api.insecure=true
      - --providers.docker
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ecommerce-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`monitor.localhost`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=web"

networks:
  ecommerce-net:
    driver: bridge

volumes:
  mongo-data:
    driver: local
